
buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'


def main_class = "io.inversion.cloud.quickstart.ApiMain";
def app_name = project.name
def build_date = new Date()
def build_time = build_date.getTime()
def image_tag = "unknown"
if(project.hasProperty('imageTagName')){
	image_tag = "${imageTagName}"
}

description = "Inversion REST API"
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://jitpack.io' }
}


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	
	compile("com.github.inversion-api:inversion-engine:master-SNAPSHOT") { changing = true }
    
    compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'org.springframework.boot:spring-boot-starter-test'
	compile 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.6.0'
	
	testCompile 'junit:junit:4.12'
	
	
}


springBoot {
    mainClass = main_class
    executable = true

    buildInfo {
        additionalProperties = [
            'app_name': app_name,
            'buildtime' : build_time,
            'image_tag' : image_tag
        ]
    }

    // Set values for variable placeholders in the service launch script.
    embeddedLaunchScriptProperties =
        [initInfoDescription: project.description,
         initInfoShortDescription: app_name,
         initInfoProvides: app_name,
         mode: 'auto']
}

jar {
	archiveName = "inversion-app.jar"
}


task buildZip(type: Zip) {
    from compileJava
    from processResources              
    into('lib') {
        from configurations.compileClasspath
    }           
}



/************************************************************
 * Ensuring source directories are created if they do not 
 * already exist when running 'gradle eclipse'
 */
eclipse {
   classpath {
      file {
         tasks.eclipse.dependsOn(cleanEclipseClasspath)
         tasks.eclipse.dependsOn("create-dirs")
      }
   }
}



/************************************************************
 * This task should be used when creating a new project as
 * it will create all source and resource directories.  This
 * task is automatically executed during the 
 * 'gradle eclipse' command.
 */
task "create-dirs" {
   doLast {
      sourceSets*.java.srcDirs*.each { it.mkdirs() }
      sourceSets*.resources.srcDirs*.each { it.mkdirs() }
   }
}


